@page "/todo"
@using TodoApp.Domain.Entities
@using TodoApp.BlazorClient.Services
@inject TodoApiService TodoService

<h3>Todo App</h3>

<h4>Lista de Tareas</h4>

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="LoadItems">Cargar Items</button>
    <button class="btn btn-success" @onclick="ShowCreateItemForm">Crear Nuevo Item</button>
</div>

@if (loading)
{
    <p>Cargando...</p>
}
else if (todoItems?.Count > 0)
{
    @foreach (var item in todoItems)
    {
        <div class="card my-2 p-3">
            <h5>@item.Id) @item.Title - @item.Description (@item.Category) - Completed: @item.IsCompleted</h5>

            <p><strong>Progreso acumulado:</strong> @item.Progressions.Sum(p => p.Percent)%</p>

            @if (item.Progressions != null && item.Progressions.Any())
            {
                <ul class="list-group">
                    @{
                        decimal acumulado = 0;
                    }
                    @foreach (var prog in item.Progressions.OrderBy(p => p.Date))
                    {
                        acumulado += prog.Percent;
                        <li class="list-group-item">
                            <div>@prog.Date.ToString("dd/MM/yyyy") - @prog.Percent% (Acumulado: @acumulado%)</div>
                        </li>
                    }
                </ul>
            }

            <button class="btn btn-sm btn-info mt-2"
                    @onclick="() => selectedItemIdForProgression = item.Id">
                Agregar Progresión
            </button>

            @if (selectedItemIdForProgression == item.Id)
            {
                <div class="mt-3">
                    <label>Fecha:</label>
                    <input type="date" class="form-control" @bind="newDate" />

                    <label class="mt-2">Porcentaje:</label>
                    <input type="number" class="form-control" @bind="newPercent" />

                    <button class="btn btn-success mt-2"
                            @onclick="() => RegisterProgression(item.Id)">
                        Registrar Progresión
                    </button>

                    <button class="btn btn-secondary mt-2 ms-2"
                            @onclick="() => selectedItemIdForProgression = null">
                        Cancelar
                    </button>
                </div>
            }
        </div>
    }
}
else
{
    <p>No hay tareas cargadas.</p>
}

@if (showCreateForm)
{
    <div class="card mt-4 p-3">
        <h5>Nuevo Todo Item</h5>

        <label>Título:</label>
        <input class="form-control" @bind="newTitle" />

        <label class="mt-2">Descripción:</label>
        <input class="form-control" @bind="newDescription" />

        <label class="mt-2">Categoría:</label>
        <select class="form-control" @bind="newCategory">
            <option value="Work">Work</option>
            <option value="Personal">Personal</option>
            <option value="Hobby">Hobby</option>
        </select>

        <button class="btn btn-primary mt-3" @onclick="CreateItem">Crear</button>
        <button class="btn btn-secondary mt-3 ms-2" @onclick="() => showCreateForm = false">Cancelar</button>
    </div>
}

@code {
    private List<TodoApp.BlazorClient.Models.TodoItem> todoItems = new();
    private bool loading = false;
    private bool showCreateForm = false;

    private string newTitle = "";
    private string newDescription = "";
    private string newCategory = "Work";

    private int? selectedItemIdForProgression = null;
    private DateTime newDate = DateTime.Today;
    private decimal newPercent = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        loading = true;
        todoItems = await TodoService.GetTodoItemsAsync();
        loading = false;
    }

    private void ShowCreateItemForm()
    {
        showCreateForm = true;
    }

    private async Task CreateItem()
    {
        await TodoService.AddTodoItemAsync(newTitle, newDescription, newCategory);
        showCreateForm = false;
        newTitle = newDescription = string.Empty;
        newCategory = "Work";
        await LoadItems();
    }

    private async Task RegisterProgression(int itemId)
    {
        try
        {
            await TodoService.RegisterProgressionAsync(itemId, newDate, newPercent);
            selectedItemIdForProgression = null;
            await LoadItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al registrar progresión: {ex.Message}");
        }
    }
}